generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int      @id @default(autoincrement())
  email     String    @unique
  password  String   
  role      Role
  createdAt     DateTime @default(now()) @db.DateTime(3)
  updatedAt     DateTime? @default(now()) @db.DateTime(3)

  pets      Pets[]
  sitters    Sitters?
  reservations Reservation[]
}

model Sitters {
  sitterId Int      @id @default(autoincrement())
  userId   Int      @unique
  career   Int
  name     String   
  createdAt     DateTime @default(now()) @db.DateTime(3)
  updatedAt     DateTime? @default(now()) @db.DateTime(3)

  users    Users    @relation(fields:[userId],references:[userId])
  reservations Reservation[]
}

model Pets {
  petId     Int      @id @default(autoincrement())
  pet_name  String   @db.VarChar(100)
  type      String   @db.VarChar(100)
  userId    Int
  createdAt     DateTime @default(now()) @db.DateTime(3)
  updatedAt     DateTime? @default(now()) @db.DateTime(3)
  user      Users    @relation(fields: [userId], references: [userId])
}

model Reservation {
  reservationId  Int      @id @default(autoincrement())
  userId         Int
  sitterId        Int 
  reservationDate String   @db.VarChar(191)
  createdAt      DateTime @default(now()) @db.DateTime(3)
  updatedAt      DateTime? @default(now()) @db.DateTime(3)
  users           Users    @relation(fields: [userId], references: [userId])
  sitter          Sitters  @relation(fields: [sitterId], references: [userId])
  Review         Review[]
}

model Review {
  reviewId      Int      @id @default(autoincrement())
  reservationId Int
  content       String   @db.VarChar(191)
  createdAt     DateTime @default(now()) @db.DateTime(3)
  updatedAt     DateTime? @default(now()) @db.DateTime(3)

  reservation   Reservation @relation(fields: [reservationId], references: [reservationId])
}



enum Role {
  normal
  sitter
}
