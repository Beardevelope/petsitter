generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Users {
  userId    Int       @id @default(autoincrement())
  email     String    @unique
  password  String
  role      Role
  createdAt DateTime  @default(now())
  updatedAt DateTime? @default(now())
  pets      Pets[]
  sitters   Sitters?
}

model Sitters {
  sitterId     Int           @id @default(autoincrement())
  userId       Int           @unique
  career       Int
  name         String
  createdAt    DateTime      @default(now())
  updatedAt    DateTime?     @default(now())
  reservations Reservation[]
  users        Users         @relation(fields: [userId], references: [userId])
}

model Pets {
  petId       Int           @id @default(autoincrement())
  pet_name    String        @db.VarChar(100)
  type        String        @db.VarChar(100)
  userId      Int
  createdAt   DateTime      @default(now())
  updatedAt   DateTime?     @default(now())
  user        Users         @relation(fields: [userId], references: [userId])
  Reservation Reservation[]

  @@index([userId], map: "Pets_userId_fkey")
}

model Reservation {
  reservationId   Int       @id @default(autoincrement())
  petId           Int
  reservationDate String
  createdAt       DateTime  @default(now())
  updatedAt       DateTime? @default(now())
  sitterId        Int
  Pets            Pets      @relation(fields: [petId], references: [petId])
  sitter          Sitters   @relation(fields: [sitterId], references: [sitterId])
  Review          Review[]

  @@index([petId], map: "Reservation_petId_fkey")
  @@index([sitterId], map: "Reservation_sitterId_fkey")
}

model Review {
  reviewId      Int         @id @default(autoincrement())
  reservationId Int
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime?   @default(now())
  reservation   Reservation @relation(fields: [reservationId], references: [reservationId])

  @@index([reservationId], map: "Review_reservationId_fkey")
}

enum Role {
  normal
  sitter
}
